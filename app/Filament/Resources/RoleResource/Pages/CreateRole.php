<?php

namespace App\Filament\Resources\RoleResource\Pages;

use App\Filament\Resources\RoleResource;
use Filament\Forms\Components\TextInput;
use Filament\Resources\Form;
use Filament\Resources\Pages\CreateRecord;
use Illuminate\Contracts\View\View;
use Spatie\Permission\Models\Permission;

class CreateRole extends CreateRecord
{
    protected static string $resource = RoleResource::class;

    public $permissionWithRole, $toggle = array();
    public $ru,$uz,$en;

    public function mount(): void
    {
        parent::mount();
        $permissions = Permission::all();
        foreach ($permissions as $permission){
            try {
                $array = explode('-',$permission->name);
                $this->permissionWithRole[$array[1]][$permission->id] = $array[0];
            }catch (\Exception $e){
                $this->permissionWithRole[$permission->name][$permission->id] = $permission->name;
            }
        }
    }


    public function selectAll($key){
        foreach ($this->permissionWithRole[$key] as $id => $permission)
            if (!in_array($id,$this->toggle)) $this->toggle = array_merge($this->toggle,[$id]);
    }

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        $data['guard_name'] = \Str::lower(\Str::snake($data['guard_name']));
        $data['title'] = $this->titleForm->getState();
        return parent::mutateFormDataBeforeCreate($data); // TODO: Change the autogenerated stub
    }

    protected function afterCreate(){
        $this->record->syncPermissions($this->toggle);
    }

    protected function form(Form $form): Form
    {
        return $form->schema([
            TextInput::make('name')->label(__('roles.name'))->required(),
            TextInput::make('guard_name')->label(__('roles.guard_name'))->required(),
        ]);
    }

    protected function getForms(): array
    {
        return array_merge(parent::getForms(),[
            'titleForm' => $this->makeForm()->schema([
                TextInput::make('uz')->label(__('roles.title',['lang'=>'uz']))
                    ->required(config('app.main_locale') == 'uz'),
                TextInput::make('ru')->label(__('roles.title',['lang'=>'ru']))
                    ->required(config('app.main_locale') == 'ru'),
                TextInput::make('en')->label(__('roles.title',['lang'=>'en']))
                    ->required(config('app.main_locale') == 'en'),
            ])
        ]);
    }

    public function render(): View
    {
        return \view('filament.resources.role-resource.create')
            ->layout('filament::components.layouts.app',[
                'title' => self::$title,
                'breadcrumbs' => self::$breadcrumb
            ]);
    }
}
